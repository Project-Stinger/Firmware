import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import os

def train_and_evaluate():
    """
    Loads the processed feature data, splits it into training and testing sets,
    trains two different ML models, and evaluates their performance.
    """
    print("--- ML-Stinger: Part 2 - Model Training & Evaluation ---")

    # --- 1. Load Data ---
    print("\n[Step 1/5] Loading processed feature data...")
    input_file = 'processed_features.csv'

    if not os.path.exists(input_file):
        print(f"--- ERROR ---")
        print(f"Input file '{input_file}' not found. Please run the '1-prepare_data.py' script first.")
        return

    try:
        df = pd.read_csv(input_file)
        print(f"Successfully loaded {len(df)} rows of feature data.")
    except Exception as e:
        print(f"An error occurred while loading the data: {e}")
        return

    # --- 2. Split Data into Features (X) and Target (y) ---
    print("\n[Step 2/5] Separating features (X) from the target (y)...")
    X = df.drop('pre_fire_signal', axis=1)
    y = df['pre_fire_signal']
    
    # Check the balance of the classes
    class_balance = y.value_counts(normalize=True)
    print(f"Class distribution:\n{class_balance * 100}")
    if class_balance.min() < 0.01:
        print("\nWarning: Your dataset is highly imbalanced. This is expected for this problem.")
        print("Accuracy might be a misleading metric. Pay close attention to precision and recall for class 1.")


    # --- 3. Split Data into Training and Testing Sets ---
    print("\n[Step 3/5] Splitting data into training and testing sets...")
    # We'll use 80% for training and 20% for testing.
    # `stratify=y` ensures that the proportion of 0s and 1s is the same in both the train and test sets.
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
    print(f"Training set shape: {X_train.shape}")
    print(f"Testing set shape: {X_test.shape}")

    # --- 4. Train and Evaluate Models ---
    print("\n[Step 4/5] Training and evaluating models...")

    # Create a dictionary to hold our models
    models = {
        "Logistic Regression (Baseline)": LogisticRegression(max_iter=1000, random_state=42),
        "Random Forest (Advanced)": RandomForestClassifier(random_state=42)
    }

    # Loop through each model to train and evaluate it
    for name, model in models.items():
        print("-" * 50)
        print(f"Training {name}...")
        
        # Train the model on the training data
        model.fit(X_train, y_train)
        
        # Make predictions on the test data
        y_pred = model.predict(X_test)
        
        # Evaluate the model
        print("\n--- Evaluation Report ---")
        accuracy = accuracy_score(y_test, y_pred)
        print(f"Accuracy: {accuracy:.4f}")
        
        # Print a detailed classification report
        print("\nClassification Report:")
        # `zero_division=0` prevents warnings if a class is never predicted
        print(classification_report(y_test, y_pred, target_names=['Not Pre-Fire', 'Pre-Fire Signal'], zero_division=0))

        # Print a confusion matrix
        print("Confusion Matrix:")
        print("         Predicted 0 | Predicted 1")
        print("         ---------------------------")
        cm = confusion_matrix(y_test, y_pred)
        print(f"Actual 0 | {cm[0][0]:>10} | {cm[0][1]:>10}")
        print(f"Actual 1 | {cm[1][0]:>10} | {cm[1][1]:>10}")
        print("-" * 50)

    # --- 5. Next Steps ---
    print("\n[Step 5/5] Analysis Complete.")
    print("\nReview the evaluation reports. The 'Pre-Fire Signal' recall is a key metric:")
    print(" - Recall: Of all the times you were about to fire, how many did the model correctly predict?")
    print("\nThe Random Forest model should show a significant improvement, especially in recall.")
    print("The next step is to choose the best model and prepare it for deployment on the device.")


if __name__ == '__main__':
    train_and_evaluate()
